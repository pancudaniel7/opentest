package com.raiffeisen.opentest.pulsarium.util.builder;

import com.raiffeisen.opentest.pulsarium.util.connection.AvroGenericSchemas;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.pulsar.client.api.Schema;
import org.apache.pulsar.client.api.schema.*;
import org.apache.pulsar.common.schema.SchemaInfo;
import org.apache.pulsar.common.schema.SchemaType;

import java.util.List;
import java.util.Map;

import static org.apache.pulsar.shade.org.eclipse.util.StringUtil.valueOf;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class AvroSchemaBuilder {
    public static GenericSchema<GenericRecord> build(Map<String, Object> schemaMap) {
        String schemaName = valueOf(schemaMap.get("schemaName"));
        RecordSchemaBuilder recordSchemaBuilder = SchemaBuilder.record(schemaName);

        for (Map<String, Object> field : (List<Map<String, Object>>) schemaMap.get("fields")) {
            setSchemaType(field, recordSchemaBuilder);
        }

        SchemaInfo schemaInfo = recordSchemaBuilder.build(SchemaType.AVRO);
        GenericSchema<GenericRecord> schema = Schema.generic(schemaInfo);

        AvroGenericSchemas.map.put(schemaName, schema);
        return schema;
    }

    public static void setSchemaType(Map<String, Object> field, RecordSchemaBuilder recordSchemaBuilder) {
        String fieldName = valueOf(field.get("name"));
        Object fieldType = field.get("type");

        if (fieldType instanceof List) {
            List<String> arrayFieldTypes = (List) fieldType;
            FieldSchemaBuilder fieldSchemaBuilder = recordSchemaBuilder.field(fieldName);

            arrayFieldTypes.forEach(
                    arrayFieldType -> {
                        if ("null".equals(arrayFieldType) || "NULL".equals(arrayFieldType)) {
                            fieldSchemaBuilder.optional();
                        } else {
                            fieldSchemaBuilder.type(SchemaType.valueOf(arrayFieldType));
                        }
                    });
        } else {
            recordSchemaBuilder.field(fieldName).type(SchemaType.valueOf(valueOf(fieldType)));
        }
    }
}
