package com.raiffeisen.opentest.pulsarium.util.connection;

import com.raiffeisen.opentest.pulsarium.exception.PulsariumConfigException;
import com.raiffeisen.opentest.pulsarium.util.SchemaFactory;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.Schema;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class Producers {

    public static final ConcurrentMap<String, Producer<Object>> map = new ConcurrentHashMap<>();

    public static void create(List<Map<String, Object>> producersConfig, PulsarClient client) {

        for (Map<String, Object> producerConfigMap : producersConfig) {

            Map schemaFormat = (Map) producerConfigMap.get("schemaFormat");
            Schema schema = SchemaFactory.create(producerConfigMap.get("schema"), schemaFormat);
            String producerName = producerConfigMap.get("producerName").toString();

            removeCustomProperties(producerConfigMap);

            try {
                if (Producers.map.containsKey(producerName)) {
                    Producers.map.get(producerName).close();
                }

                Producer<Object> producer = client.newProducer(schema)
                        .loadConf(producerConfigMap)
                        .create();

                Producers.map.put(producerName, producer);
            } catch (PulsarClientException e) {
                throw new PulsariumConfigException("Fail to create Pulsar producer," +
                        " check if Pulsarium producer configs are set correctly ", e);
            }
        }
    }

    private static void removeCustomProperties(Map configMap) {
        configMap.remove("schema");
    }
}
