package com.raiffeisen.opentest.pulsarium.util.connection;

import com.raiffeisen.opentest.pulsarium.exception.PulsariumConfigException;
import com.raiffeisen.opentest.pulsarium.util.SchemaFactory;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.pulsar.client.api.Consumer;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.Schema;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class Consumers {
    public static final ConcurrentMap<String, Consumer<Object>> map = new ConcurrentHashMap<>();

    public static void create(List<Map<String, Object>> consumerConfig, PulsarClient client) {

        for (Map<String, Object> consumerConfigMap : consumerConfig) {

            Schema schema = SchemaFactory.create(consumerConfigMap.get("schema"));
            String consumerName = consumerConfigMap.get("consumerName").toString();

            removeCustomProperties(consumerConfigMap);

            try {
                if (Consumers.map.containsKey(consumerName)) {
                    Consumers.map.get(consumerName).close();
                }

                Consumer<Object> consumer = client.newConsumer(schema)
                        .loadConf(consumerConfigMap)
                        .subscribe();

                Consumers.map.put(consumerName, consumer);
            } catch (PulsarClientException e) {
                throw new PulsariumConfigException("Fail to create Pulsar consumer," +
                        " check if Pulsarium consumer configs are set correctly ", e);
            }
        }
    }

    private static void removeCustomProperties(Map configMap) {
        configMap.remove("schema");
    }
}
