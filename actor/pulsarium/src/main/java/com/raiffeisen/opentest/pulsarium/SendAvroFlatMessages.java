package com.raiffeisen.opentest.pulsarium;

import com.raiffeisen.opentest.pulsarium.core.PulsariumTestAction;
import com.raiffeisen.opentest.pulsarium.exception.PulsariumProducerException;
import com.raiffeisen.opentest.pulsarium.util.builder.AvroMessageBuilder;
import com.raiffeisen.opentest.pulsarium.util.connection.AvroGenericSchemas;
import com.raiffeisen.opentest.pulsarium.util.connection.Producers;
import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.TypedMessageBuilder;
import org.apache.pulsar.client.api.schema.GenericRecord;
import org.apache.pulsar.client.api.schema.GenericSchema;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.lang.String.format;

public class SendAvroFlatMessages extends PulsariumTestAction {
    @Override
    public void run() {
        super.run();

        String schemaName = readStringArgument("schemaName");
        GenericSchema<GenericRecord> schema = AvroGenericSchemas.map.get(schemaName);

        String producerName = readStringArgument("producerName");
        Producer<Object> producer = Producers.map.get(producerName);

        List<Map<String, String>> messages = readArrayArgument("messages", List.class);

        List<TypedMessageBuilder<Object>> pulsarMessages = messages.stream().map(
                message -> AvroMessageBuilder.build(message, producer, schema)).collect(Collectors.toList());

        pulsarMessages.forEach(pulsarMessage -> {
            try {
                pulsarMessage.send();
            } catch (PulsarClientException e) {
                throw new PulsariumProducerException(format("Fail to sent message: %s for producer: %s", pulsarMessage, producerName), e);
            }
        });
    }
}
