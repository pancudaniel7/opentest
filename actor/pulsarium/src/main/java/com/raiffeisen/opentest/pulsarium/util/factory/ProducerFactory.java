package com.raiffeisen.opentest.pulsarium.util.factory;

import com.raiffeisen.opentest.pulsarium.exception.PulsariumConfigException;
import com.raiffeisen.opentest.pulsarium.util.connection.Producers;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.pulsar.client.api.Producer;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.api.Schema;

import java.util.List;
import java.util.Map;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ProducerFactory extends PulsarFactory {

    public static void createProducer(List<Map<String, Object>> producersConfig, PulsarClient client) {

        for (Map<String, Object> producerConfigMap : producersConfig) {

            Schema schema = getSchemaFrom(producerConfigMap);
            String producerName = producerConfigMap.get("producerName").toString();

            removeCustomProperties(producerConfigMap);

            try {
                if (Producers.map.containsKey(producerName)) {
                    Producers.map.get(producerName).close();
                }

                Producer<Object> producer = client.newProducer(schema)
                        .loadConf(producerConfigMap)
                        .create();

                Producers.map.put(producer.getProducerName(), producer);

            } catch (PulsarClientException e) {
                throw new PulsariumConfigException("Fail to create Pulsar producer," +
                        " check if Pulsarium producer configs are set correctly ", e);
            }
        }
    }
}
