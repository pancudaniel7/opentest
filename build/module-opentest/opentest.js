#!/usr/bin/env node
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const inquirer = require('inquirer');
const session = require('./session');
const shelljs = require('shelljs');
const yargs = require('yargs');

const examples =
    'Initialize server\'s working directory to C:\\opentest\\server:\n' +
    'opentest server init C:\\opentest\\server\n' +

    '\nStart server in working directory to C:\\opentest\\server:\n' +
    'opentest server C:\\opentest\\server\n' +

    '\nInitialize actor\'s working directory to C:\\opentest\\actor1:\n' +
    'opentest actor init C:\\opentest\\actor1\n' +

    '\nStart actor in working directory to C:\\opentest\\actor1:\n' +
    'opentest actor C:\\opentest\\actor1\n';

yargs
    // Server commands
    .command('server', 'Sync server commands', function (yargs) {
        // server init
        yargs.command(
            'init [workdir]',
            'Initializes the OpenTest server working directory',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The server\'s working directory',
                    type: 'string'
                });
            },
            function (argv) { initServer(argv) });
        // server start
        yargs.command(
            '* [workdir]',
            'Starts OpenTest server in the current directory, or in the directory specified',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The working directory to start the server in',
                    type: 'string'
                });
            },
            function (argv) {
                const opentestServer = require('opentest-server');
                const workDir = argv.workdir || process.cwd();
                opentestServer.start({ workDir: workDir });
            });

        yargs.demandCommand();
    })
    // Actor commands
    .command('actor', 'Test actor commands', function (yargs) {
        // actor init
        yargs.command(
            'init [workdir] [actorType]',
            'Initializes the test actor\'s working directory',
            function (yargs) {
                yargs
                    .positional('workdir', {
                        describe: 'The actor\'s working directory',
                        type: 'string'
                    })
                    .positional('actorType', {
                        describe: 'The test actor type (WEB, MOB, API, etc.)',
                        type: 'string'
                    })
                    .options({
                        y: {
                            default: false,
                            describe: 'Accept all defaults offered',
                            type: 'boolean'
                        },
                    });
            },
            function (argv) { initActor(argv) });

        // actor start
        yargs.command(
            '* [workdir]',
            'Starts a test actor in the current directory, or in the directory specified',
            function (yargs) {
                yargs.positional('workdir', {
                    describe: 'The working directory to start the server in',
                    type: 'string'
                });
            },
            function (argv) {
                const opentestActor = require('opentest-actor');
                const workDir = argv.workdir || process.cwd();
                opentestActor.start({ workDir: workDir });
            });

        yargs.demandCommand();
    })
    .command('session', 'Test session commands', function (yargs) {
        yargs.command(
            'create [template] [wait] [server] [out] [env]',
            'Creates a new test session',
            function (yargs) {
                yargs.options('out', {
                    describe: 'Sets the name of the file that test results will be written to.',
                    type: 'string'
                });

                yargs.options('server', {
                    describe: 'The URL to the OpenTest server.',
                    type: 'string',
                    default: 'http://localhost:3000'
                });

                yargs.options('template', {
                    alias : 't',
                    describe: 'The partial path to the test session template file to use.',
                    type: 'string'
                });

                // The wait option can be used with or without a value, which is
                // why is doesn't have a default value
                yargs.options('wait', {
                    describe: 'Sets how long to wait for the session to complete before timing out, in seconds.',
                    type: 'string'
                });

                yargs.options('env', {
                    alias: 'e',
                    describe: 'The environment to run the tests against.',
                    type: 'string'
                });
            },
            function (argv) {
                // When the wait option is specified without a value,
                // its value will be undefined
                if (argv.wait !== undefined) {
                    let timeout = parseInt(argv.wait);
                    if (!timeout) {
                        timeout = 2 * 60 * 60; // 2 hours
                    }
                    session.createSessionFromTemplateAndWait(argv.template, {
                        server: argv.server,
                        environment: argv.env,
                        timeout: timeout,
                        outFile: argv.out
                    });
                } else {
                    session.createSessionFromTemplate(argv.template, {
                        server: argv.server,
                        environment: argv.env
                    });
                }
            });

        yargs.demandCommand();
    })
    .command('quick-start', 'Create server, actor and test repo dir', function (yargs) {
        const workDir = path.join(process.cwd());
        const testRepoDir = path.join(workDir, 'test-repo');
        createServerWorkDir(path.join(workDir, 'server'), testRepoDir);
        createTestRepoDir(testRepoDir);
        createActorWorkDir(path.join(workDir, 'actor1'), {
            actorType: 'ACTOR1',
            syncServerUrl: 'http://localhost:3000'
        });
    })
    // encrypt
    .command('encrypt [text]', 'Encrypt some text using the provided password',
        function (yargs) {
            yargs
                .options({
                    password: {
                        alias: 'p',
                        describe: 'Encryption password',
                        demandOption: true
                    },
                });
        },
        function (argv) {
            const opentestActor = require('opentest-actor');
            opentestActor.start({ args: ['--encrypt', argv.text, '--password', argv.password] });
        })
    // decrypt
    .command('decrypt [text]', 'Decrypt some text using the provided password',
        function (yargs) {
            yargs
                .options({
                    password: {
                        alias: 'p',
                        describe: 'Encryption password',
                        demandOption: true
                    },
                });
        },
        function (argv) {
            const opentestActor = require('opentest-actor');
            opentestActor.start({ args: ['--decrypt', argv.text, '--password', argv.password] });
        })

    .help()
    .alias('h', 'help')
    .version()
    .alias('v', 'version')
    .demandCommand()
    .example(examples)
    .strict()
    .parse(process.argv.slice(2), (err, argv, output) => {
        if (output) {
            // Replace "opentest.js" with "opentest" in the usage string of the CLI
            const newOutput = output.replace("opentest.js", "opentest");
            console.log(newOutput);
        }
    });

function createActorWorkDir(workDir, options) {
    shelljs.mkdir('-p', workDir);

    let sampleConfigFile = path.join(__dirname, 'node_modules', 'opentest-actor', 'actor.yaml');
    const actorConfigFile = path.join(workDir, 'actor.yaml');

    if (fs.existsSync(actorConfigFile)) {
        sampleConfigFile = actorConfigFile;
    } else {
        shelljs.cp(sampleConfigFile, actorConfigFile);
    }

    shelljs.sed(
        '-i',
        /^actorType:.*/,
        'actorType: ' + options.actorType,
        actorConfigFile);

    shelljs.sed(
        '-i',
        /^syncServerUrl:.*/,
        'syncServerUrl: ' + JSON.stringify(options.syncServerUrl),
        actorConfigFile);
}

function createServerWorkDir(workDir, testRepoDir) {
    shelljs.mkdir('-p', workDir);
    let sampleConfigFile = path.join(__dirname, 'node_modules', 'opentest-server', 'server.yaml');
    const serverConfigFile = path.join(workDir, 'server.yaml');

    if (fs.existsSync(serverConfigFile)) {
        sampleConfigFile = serverConfigFile;
    } else {
        shelljs.cp(sampleConfigFile, serverConfigFile);
    }

    shelljs.sed(
        '-i',
        /^testRepoDir:.*/,
        'testRepoDir: ' + JSON.stringify(testRepoDir),
        serverConfigFile);
}

function createTestRepoDir(testRepoDir) {
    var repoExists = true;

    if (!fs.existsSync(testRepoDir)) {
        repoExists = false;
    } else {
        if (fs.readdirSync(testRepoDir).length === 0) {
            repoExists = false;
        }
    }

    if (!repoExists) {
        // Create test repo with same content as the sample repo
        const sampleTestRepoDir = path.join(__dirname, 'test-repo', '*');
        shelljs.mkdir('-p', testRepoDir);
        shelljs.cp('-r', sampleTestRepoDir, testRepoDir);
    }
}

/** Initialize a test actor's working directory using interactive
 * input from the user. */
function initActor(argv) {
    let workDir = makeAbsolute(argv.workdir || 'actor1');
    let actorType = argv.actorType || 'ACTOR1';
    let syncServerUrl = 'http://localhost:3000';

    if (!argv.y) {
        const questions = [{
            type: 'input',
            name: 'actorType',
            message: "Actor type",
            default: actorType
        }, {
            type: 'input',
            name: 'workDir',
            message: "Test actor's working directory",
            default: (answers) => {
                if (argv.workdir) {
                    return makeAbsolute(argv.workdir)
                } else if (/actor\d+/i.test(answers.actorType)) {
                    // If the actor type is ACTOR1, ACTOR2, etc., use
                    // that as the directory name (make lowercase)
                    return makeAbsolute(answers.actorType.toLowerCase());
                } else {
                    return makeAbsolute('actor-' + answers.actorType.toLowerCase());
                }
            },
            filter: (workDir) => {
                return makeAbsolute(workDir);
            }
        }, {
            type: 'input',
            name: 'syncServerUrl',
            message: 'Server URL',
            default: 'http://localhost:3000'
        }];

        inquirer.prompt(questions).then(answers => {
            workDir = makeAbsolute(answers.workDir);
            actorType = answers.actorType || 'ACTOR1';
            syncServerUrl = answers.syncServerUrl;
            go();
        });
    } else {
        go();
    }

    /** This silly function is here just to avoid code duplication. */
    function go() {
        createActorWorkDir(workDir, {
            actorType: actorType,
            syncServerUrl: syncServerUrl
        });

        console.log('\nAll done. Use the commands bellow to start the test actor:\n');

        console.log(chalk.cyan('cd ' + workDir));
        console.log(chalk.cyan('opentest actor\n'));
    }
}

/** Initialize the OpenTest server's working directory using
 * interactive input from the user. */
function initServer(argv) {
    let workDir = makeAbsolute(argv.workdir || path.join(process.cwd(), 'server'));
    let testRepoDir = null;

    const questions = [{
        type: 'input',
        name: 'workDir',
        message: "Server's working directory",
        default: workDir,
        filter: (workDir) => {
            return makeAbsolute(workDir);
        },
        validate: (workDir) => {
            testRepoDir = path.join(
                path.normalize(path.join(workDir, '..')),
                'test-repo');
            return true;
        }
    }, {
        type: 'input',
        name: 'testRepoDir',
        message: "Test repo directory",
        default: () => { return testRepoDir; },
        filter: (testRepoDir) => {
            return makeAbsolute(testRepoDir);
        }
    }];

    inquirer.prompt(questions).then(answers => {
        let workDir = makeAbsolute(answers.workDir);
        let testRepoDir = makeAbsolute(answers.testRepoDir);

        createServerWorkDir(workDir, testRepoDir);
        createTestRepoDir(testRepoDir);

        shelljs.cd(workDir);
        console.log('\nAll done. Use the commands bellow to start the OpenTest server:\n');

        console.log(chalk.cyan('cd ' + workDir));
        console.log(chalk.cyan('opentest server\n'));
    });
}

function makeAbsolute(filePath) {
    filePath = path.normalize(filePath);

    if (path.isAbsolute(filePath)) {
        return filePath;
    } else {
        return path.join(process.cwd(), filePath);
    }
}
